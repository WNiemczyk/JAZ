package com.example.jsfdemo.service;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import javax.enterprise.context.ApplicationScoped;

import com.example.jsfdemo.domain.Director;
import com.example.jsfdemo.domain.Film;
import com.example.jsfdemo.status.FilmStatus;

@ApplicationScoped
public class DBFilm {

	private Connection connection;
	private Statement statement;
	private PreparedStatement addFilmStatement;
	private PreparedStatement addFilmDirectorStatement;
	private PreparedStatement getFilmStatement;
	private PreparedStatement deleteFilmStatement;
	private PreparedStatement deleteAllFilmsStatement;
	private PreparedStatement findFilmStatement;
	private PreparedStatement findFilmStatementByTitle;
	private PreparedStatement findFilmStatementByDirector;
	private PreparedStatement findFilmStatementByYear;
	private PreparedStatement findMaxIdStatement;
	private PreparedStatement findDirectorId;

	public DBFilm() {

		{
			try {
				connection = DriverManager
						.getConnection("jdbc:hsqldb:hsql://localhost/workdb");

				statement = connection.createStatement();
				boolean filmTableExists = false;
				boolean filmDirectorExists = false;

				ResultSet rs = connection.getMetaData().getTables(null, null,
						null, null);

				while (rs.next()) {
					if ("Film".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
						filmTableExists = true;
					}
					if ("Film_Director".equalsIgnoreCase(rs
							.getString("TABLE_NAME"))) {
						filmDirectorExists = true;
					}
					if (filmTableExists && filmDirectorExists)
						break;
				}

				if (!filmTableExists) {
					statement
							.executeUpdate("CREATE TABLE film(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, title varchar(20), year integer, status varchar(20))");
				}
				if (!filmTableExists) {
					statement
							.executeUpdate("CREATE TABLE film_director(film_id bigint, director_id bigint)");
					statement
							.executeUpdate("ALTER TABLE film_director ADD FOREIGN KEY (film_id) REFERENCES film(id) ON DELETE CASCADE");
					statement
							.executeUpdate("ALTER TABLE film_director ADD FOREIGN KEY (director_id) REFERENCES director(id) ON DELETE CASCADE");
				}

				addFilmStatement = connection
						.prepareStatement("INSERT INTO film (title, year, status) VALUES (?, ?, ?)");

				addFilmDirectorStatement = connection
						.prepareStatement("INSERT INTO film_director(film_id, director_id) VALUES (?, ?)");

				getFilmStatement = connection
						.prepareStatement("SELECT f.*, d.name, d.surname FROM FILM f, FILM_DIRECTOR fd, DIRECTOR d WHERE f.id = fd.film_id AND d.id = fd.director_id ORDER BY f.title");

				deleteAllFilmsStatement = connection
						.prepareStatement("DELETE FROM film");

				findFilmStatement = connection
						.prepareStatement("SELECT id FROM Film");

				findFilmStatementByTitle = connection
						.prepareStatement("SELECT id FROM Film WHERE title = ?");

				findFilmStatementByDirector = connection
						.prepareStatement("SELECT f.id FROM Film f, Film_Director fd, Director d WHERE f.id = fd.film_id AND d.id = fd.director_id AND d.surname = ?");

				findFilmStatementByYear = connection
						.prepareStatement("SELECT id FROM Film WHERE year = ?");

				deleteFilmStatement = connection
						.prepareStatement("DELETE FROM Film WHERE id = ?");

				findMaxIdStatement = connection
						.prepareStatement("SELECT MAX(id) AS id FROM film");

				findDirectorId = connection
						.prepareStatement("SELECT id, name+surname FROM director WHERE name = ? AND surname = ?");

				// findDirectorId = connection
				// .prepareStatement("SELECT id FROM (SELECT id, name+surname AS name FROM director) WHERE name = ? AND surname = ?");

			} catch (SQLException e) {

				e.printStackTrace();
			}
		}
	}

	public void addFilm(Film film) {
		int maxFilmId = -1;
		int idDirector = -1;
		try {

			addFilmStatement.setString(1, film.getTitle());
			addFilmStatement.setInt(2, film.getYear());
			addFilmStatement.setString(3, film.getStatus().toString());
			addFilmStatement.executeUpdate();
			ResultSet rs = findMaxIdStatement.executeQuery();
			while (rs.next())
				maxFilmId = rs.getInt("ID");

			for (Director d : film.getDirectors()) {
				findDirectorId.setString(1, d.getName());
				findDirectorId.setString(2, d.getSurname());

				rs = findDirectorId.executeQuery();
				while (rs.next())
					idDirector = rs.getInt("ID");

				addFilmDirectorStatement.setInt(1, maxFilmId);
				addFilmDirectorStatement.setInt(2, idDirector);
				addFilmDirectorStatement.executeUpdate();
			}
		}

		catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public void addListOfFilms(List<Film> films) {

		for (Film f : films)
			addFilm(f);
	}

	public List<Integer> getListIdFilm() {

		List<Integer> foundedIds = new ArrayList<Integer>();

		try {
			ResultSet rs = findFilmStatement.executeQuery();
			while (rs.next())
				foundedIds.add(rs.getInt("ID"));

			return foundedIds;

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return null;
	}

	public int getIdFilmByTitle(String t) {

		int foundedId = -1;

		try {

			findFilmStatementByTitle.setString(1, t);
			ResultSet rs = findFilmStatementByTitle.executeQuery();
			while (rs.next()) {

				foundedId = rs.getInt("ID");
				return foundedId;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return -1;
	}

	public List<Integer> getListIdFilmByTitle(String t) {

		List<Integer> foundedIds = new ArrayList<Integer>();

		try {
			findFilmStatementByTitle.setString(1, t);
			ResultSet rs = findFilmStatementByTitle.executeQuery();

			while (rs.next()) {

				foundedIds.add(rs.getInt("ID"));
			}
			return foundedIds;

		} catch (SQLException e) {

			e.printStackTrace();
		}

		return null;
	}

	public void addCondition(String d, DBFilmCondition fc) {
		List<Integer> ids = getListIdFilmByDirector(d);
		for (Integer i : ids) {
			if (fc.getCondition(i)) {
				System.out.println("Counter for director " + d
						+ " who has more than one film in database.");
			}

		}

	}

	public List<Integer> getListIdFilmByDirector(String d) {

		List<Integer> foundedIds = new ArrayList<Integer>();

		try {
			findFilmStatementByDirector.setString(1, d);
			ResultSet rs = findFilmStatementByDirector.executeQuery();
			while (rs.next()) {
				foundedIds.add(rs.getInt("ID"));
			}
			return foundedIds;

		} catch (SQLException e) {

			e.printStackTrace();
		}

		return null;
	}

	public List<Integer> getIdFilmByYear(int y) {

		List<Integer> foundedIds = new ArrayList<Integer>();

		try {

			findFilmStatementByYear.setInt(1, y);
			ResultSet rs = findFilmStatementByYear.executeQuery();
			while (rs.next()) {

				foundedIds.add(rs.getInt("ID"));
			}

			return foundedIds;

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return null;
	}

	public List<Film> getAllFilms() {

		List<Film> films = new ArrayList<Film>();

		try {

			ResultSet rs = getFilmStatement.executeQuery();

			while (rs.next()) {

				FilmStatus status = null;

				if (rs.getString("status").equals("Available"))
					status = FilmStatus.Available;
				if (rs.getString("status").equals("Borrowed"))
					status = FilmStatus.Borrowed;
				if (rs.getString("status").equals("Reserved"))
					status = FilmStatus.Reserved;

				List<Director> directors = null;

				films.add(new Film(rs.getString("title"), directors, rs
						.getInt("year"), status));
			}

			return films;
		}

		catch (SQLException e) {

			e.printStackTrace();
		}

		return null;
	}

	public void deleteFilm(int id) {

		try {

			deleteFilmStatement.setInt(1, id); // w miejsce ? wstawia zmiennÄ…
												// (tutaj id)
			deleteFilmStatement.executeUpdate();

		}

		catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void deleteAllFilms() {

		try {

			deleteAllFilmsStatement.executeUpdate();
		}

		catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
