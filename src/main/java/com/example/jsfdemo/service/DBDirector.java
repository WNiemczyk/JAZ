package com.example.jsfdemo.service;

import java.io.IOException;
import java.sql.*;
import java.sql.Date;
import java.util.*;
import java.sql.ResultSet;

import javax.enterprise.context.ApplicationScoped;

import com.example.jsfdemo.domain.Director;


@ApplicationScoped
public class DBDirector {

	private Connection connection;
	private Statement statement;
	private PreparedStatement addDirectorStatement;
	private PreparedStatement getDirectorStatement;
	private PreparedStatement findDirectorStatement;
	private PreparedStatement findDirectorStatementBySurname;
	private PreparedStatement deleteDirectorStatement;
	private PreparedStatement deleteAllDirectorsStatement;

	
	
	public DBDirector() {

		{
			try 
			{
			connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
			statement = connection.createStatement();
			boolean directorTableExists = false;

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);

			while (rs.next()) {
				if ("Director".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					directorTableExists = true;
					break;
				}
			}

			if (!directorTableExists) {
				statement
						.executeUpdate("CREATE TABLE director(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(20), surname varchar(40), countryOfBirth varchar(20), dateOfBirth Date)");
			}

			addDirectorStatement = connection
					.prepareStatement("INSERT INTO director (name, surname, countryOfBirth, dateOfBirth) VALUES (?, ?, ?, ?)");

			getDirectorStatement = connection
					.prepareStatement("SELECT id, name, surname, countryOfBirth, dateOfBirth FROM director");

			findDirectorStatement = connection
					.prepareStatement("SELECT id FROM director");

			findDirectorStatementBySurname = connection
					.prepareStatement("SELECT id FROM director WHERE surname = ?");

			deleteAllDirectorsStatement = connection
					.prepareStatement("DELETE FROM director");

			deleteDirectorStatement = connection
					.prepareStatement("DELETE FROM director WHERE id = ?");

			} 
			catch (SQLException e) {

				e.printStackTrace();
			}
		}
	}
	
	public void addDirector(Director d) {

		try {
			java.sql.Date date = new java.sql.Date(d.getDateOfBirth().getTime());
			addDirectorStatement.setString(1, d.getName());
			addDirectorStatement.setString(2, d.getSurname());
			addDirectorStatement.setString(3, d.getCountryOfBirth());
			addDirectorStatement.setDate(4, date);
			addDirectorStatement.executeUpdate();

		}

		catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public void addListOfDirectors(List<Director> director) {

		for (Director d : director)
			addDirector(d);
	}

	public List<Director> getAllDirectors() {

		List<Director> directors = new ArrayList<Director>();

		try {

			ResultSet rs = getDirectorStatement.executeQuery();

			while (rs.next()) {

				directors.add(new Director(rs.getString("name"), rs
						.getString("surname"), rs.getString("countryOfBirth"), rs.getDate("dateOfBirth")));
			}

			return directors;

		}

		catch (SQLException e) {

			e.printStackTrace();
		}

		return null;
	}

	public List<Integer> getListIdDirector() {

		List<Integer> foundedIds = new ArrayList<Integer>();

		try {
			ResultSet rs = findDirectorStatement.executeQuery();
			while (rs.next())
				foundedIds.add(rs.getInt("ID"));

			return foundedIds;

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return null;
	}

	public int getIdDirectorBySurname(String s) {

		int foundedId = -1;

		try {

			findDirectorStatementBySurname.setString(1, s);
			ResultSet rs = findDirectorStatementBySurname.executeQuery();
			while (rs.next()) {

				foundedId = rs.getInt("ID");
				return foundedId;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return -1;
	}

	public List<Integer> getListIdDirectorBySurname(String s) {

		List<Integer> foundedIds = new ArrayList<Integer>();

		try {

			findDirectorStatementBySurname.setString(1, s);
			ResultSet rs = findDirectorStatementBySurname.executeQuery();
			while (rs.next()) {

				foundedIds.add(rs.getInt("ID"));
				return foundedIds;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return null;
	}

	public void deleteDirector(int id) {

		try {

			deleteDirectorStatement.setInt(1, id);
			deleteDirectorStatement.executeUpdate();

		}

		catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void deleteAllDirectors() {

		try {

			deleteAllDirectorsStatement.executeUpdate();
		}

		catch (SQLException e) {
			e.printStackTrace();
		}
	}

}










